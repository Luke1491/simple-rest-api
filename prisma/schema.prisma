// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    Account  @relation(fields: [authorId], references: [id])
  authorId  Int      @map("author_id")

  @@map("post")
}

enum AccountType {
  user
  admin
}

enum Provider {
  system      // traditional email and password -> already implemented in
  google      // already implemented in
}

enum AccountStatus {
  CREATED
  ACTIVATED
  DELETED
  SUSPENDED
  BLOCKED
}

model Account {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(uuid())
  email         String          @unique
  provider      Provider        @default(system)
  emailVerified Boolean         @default(false) @map("email_verified")
  password      String?
  name          String?
  status        AccountStatus   @default(CREATED)
  lastLogged    String          @map("last_logged") @default("")
  createdAt     DateTime        @default(now()) @db.Timestamptz(6) @map("created_at")
  type          AccountType     @default(user)
  posts         Post[]
  profile       Profile?
  business      Business?

  @@map("account")
}
model Profile {
  id        Int         @id @default(autoincrement())
  bio       String?
  givenName String?     @map("given_name")
  familyName String?    @map("family_name")
  avatar    String? 
  language  String?
  locale    String?
  user      Account     @relation(fields: [userId], references: [id])
  userId    Int         @unique @map("user_id")

  @@map("profile")
}

//business data
model Business {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  phone     String?
  website   String?
  logo      String?
  status    String?
  account   Account? @relation(fields: [accountUuid], references: [uuid])
  accountUuid String @unique @map("account_uuid")

  @@map("business")
}
